import asyncio
import websockets
import wave
import logging
import os
import json
import base64

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
STT_WS_URI = "ws://localhost:8001"  # STT —Å–µ—Ä–≤–∏—Å –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è —Å—é–¥–∞ –∫–∞–∫ –∫–ª–∏–µ–Ω—Ç
AUDIO_FILE = os.path.join(os.path.dirname(__file__), "out.wav")
SAMPLE_RATE = 16000
CHUNK_SIZE = int(SAMPLE_RATE * 0.2)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ 200 –º—Å –∞—É–¥–∏–æ

class MockBackend:
    """–ú–æ–∫-–±—ç–∫–µ–Ω–¥, –∫–æ—Ç–æ—Ä—ã–π —Ñ–æ—Ä–≤–∞—Ä–¥–∏—Ç –∞—É–¥–∏–æ –≤ STT –∏ –ø–æ–ª—É—á–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã"""
    
    def __init__(self):
        self.stt_connection = None
        self.received_results = []
    
    async def handle_stt_connection(self, websocket):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç STT —Å–µ—Ä–≤–∏—Å–∞"""
        logger.info("‚úÖ STT —Å–µ—Ä–≤–∏—Å –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ –º–æ–∫-–±—ç–∫–µ–Ω–¥—É")
        self.stt_connection = websocket
        
        try:
            async for message in websocket:
                try:
                    data = json.loads(message)
                    msg_type = data.get("type")
                    
                    if msg_type == "final_text":
                        logger.info("üéØ –ü–æ–ª—É—á–µ–Ω —Ä–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç STT:")
                        logger.info(f"   ClientId: {data.get('clientId')}")
                        logger.info(f"   EventId: {data.get('eventId')}")
                        logger.info(f"   Text: {data.get('text')}")
                        logger.info("-" * 60)
                        self.received_results.append(data)
                    else:
                        logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç STT: {data}")
                        
                except json.JSONDecodeError:
                    logger.warning("–ü–æ–ª—É—á–µ–Ω–æ –Ω–µ-JSON —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç STT")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç STT: {e}")
                    
        except websockets.exceptions.ConnectionClosed:
            logger.info("STT —Å–µ—Ä–≤–∏—Å –æ—Ç–∫–ª—é—á–∏–ª—Å—è")
        finally:
            self.stt_connection = None
    
    async def send_audio_to_stt(self, client_id: str, event_id: str, audio_file: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ –≤ STT —á–µ—Ä–µ–∑ WebSocket"""
        
        # –ñ–¥—ë–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è STT
        logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è STT —Å–µ—Ä–≤–∏—Å–∞...")
        for _ in range(30):  # –ñ–¥—ë–º –¥–æ 30 —Å–µ–∫—É–Ω–¥
            if self.stt_connection:
                break
            await asyncio.sleep(1)
        
        if not self.stt_connection:
            logger.error("‚ùå STT —Å–µ—Ä–≤–∏—Å –Ω–µ –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∑–∞ 30 —Å–µ–∫—É–Ω–¥")
            return
        
        logger.info("üì§ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –∞—É–¥–∏–æ –≤ STT...")
        
        try:
            with wave.open(audio_file, 'rb') as wf:
                if wf.getframerate() != SAMPLE_RATE or wf.getsampwidth() != 2 or wf.getnchannels() != 1:
                    logger.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª–∞: {audio_file}. "
                                 f"–¢—Ä–µ–±—É–µ—Ç—Å—è WAV, 16000 –ì—Ü, 16 –±–∏—Ç, –º–æ–Ω–æ.")
                    return
                
                total_bytes_sent = 0
                chunk_count = 0
                
                while True:
                    audio_bytes = wf.readframes(CHUNK_SIZE)
                    if not audio_bytes:
                        break  # –§–∞–π–ª –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                    
                    # –ö–æ–¥–∏—Ä—É–µ–º –≤ base64 –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON
                    audio_b64 = base64.b64encode(audio_bytes).decode('utf-8')
                    message = {
                        "type": "audio",
                        "clientId": client_id,
                        "eventId": event_id,
                        "audio": audio_b64
                    }
                    
                    await self.stt_connection.send(json.dumps(message))
                    total_bytes_sent += len(audio_bytes)
                    chunk_count += 1
                    
                    # –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Ä–µ–∞–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                    await asyncio.sleep(0.1)
                
                logger.info(f"‚úÖ –ê—É–¥–∏–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_bytes_sent} –±–∞–π—Ç, {chunk_count} —á–∞–Ω–∫–æ–≤")
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
                end_message = {
                    "type": "end",
                    "clientId": client_id,
                    "eventId": event_id
                }
                await self.stt_connection.send(json.dumps(end_message))
                logger.info("üì® –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ—Å—Å–∏–∏")
                
                # –ñ–¥—ë–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–∏–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                await asyncio.sleep(2)
                
        except FileNotFoundError:
            logger.error(f"–ê—É–¥–∏–æ—Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω: {audio_file}")
        except Exception as e:
            logger.error(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ: {e}", exc_info=True)


async def run_test():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–∫-–±—ç–∫–µ–Ω–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ"""
    
    backend = MockBackend()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –ø—Ä–∏—ë–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –æ—Ç STT
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –º–æ–∫-–±—ç–∫–µ–Ω–¥–∞ –Ω–∞ ws://localhost:8080/stt-ingest")
    
    async with websockets.serve(backend.handle_stt_connection, "localhost", 8080):
        logger.info("‚úÖ –ú–æ–∫-–±—ç–∫–µ–Ω–¥ –∑–∞–ø—É—â–µ–Ω –∏ –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è STT —Å–µ—Ä–≤–∏—Å–∞")
        logger.info("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ STT —Å–µ—Ä–≤–∏—Å –∑–∞–ø—É—â–µ–Ω –∏ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∫ ws://localhost:8080/stt-ingest")
        logger.info("-" * 60)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –∞—É–¥–∏–æ
        await backend.send_audio_to_stt(
            client_id="test_client_123",
            event_id="test_event_456",
            audio_file=AUDIO_FILE
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ç–æ–≥–∏
        logger.info("=" * 60)
        logger.info(f"üìä –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ª—É—á–µ–Ω–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {len(backend.received_results)}")
        
        if backend.received_results:
            logger.info("\nüìù –í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            for idx, result in enumerate(backend.received_results, 1):
                logger.info(f"\n  –†–µ–∑—É–ª—å—Ç–∞—Ç #{idx}:")
                logger.info(f"    ClientId: {result.get('clientId')}")
                logger.info(f"    EventId: {result.get('eventId')}")
                logger.info(f"    Text: {result.get('text')}")
        else:
            logger.warning("‚ö†Ô∏è  –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –ø–æ–ª—É—á–µ–Ω—ã. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ STT —Å–µ—Ä–≤–∏—Å–∞.")
        
        logger.info("=" * 60)
        logger.info("üõë –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–∫-–±—ç–∫–µ–Ω–¥–∞")
        
        # –î–µ—Ä–∂–∏–º —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω–Ω—ã–º
        await asyncio.Future()  # –ë–µ—Å–∫–æ–Ω–µ—á–Ω–æ–µ –æ–∂–∏–¥–∞–Ω–∏–µ


if __name__ == "__main__":
    try:
        asyncio.run(run_test())
    except KeyboardInterrupt:
        logger.info("\nüëã –ú–æ–∫-–±—ç–∫–µ–Ω–¥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")